Dev pipeline -->          QA Pipeline ------------------------------->   Staging Pipeline --->          Ready for certificaion production
Build unit test           Build and unit test in parallel                e2e|load|performance||api|
Smoke || sanity ||unit    functional || integration || regression test   
Sanity                        
Unit test
Feature test
(specific to bug or regression)


name: Basic CI Pipeline

# This section specifies when the workflow will be triggered. 
# The cron syntax runs the workflow at 12:00 AM and 12:00 PM UTC every day.
on:
  schedule:
    - cron: '30 4 * * *'  # Runs at 4:30 AM UTC (10:00 AM IST) - Good overlap for US East Coast / India
    - cron: '30 14 * * *'  # Runs at 2:30 PM UTC (8:00 PM IST) - Good overlap for US East Coast / India
 
# The 'jobs' section defines the various jobs that will run as part of the workflow.
jobs:
  # Job for setting up the environment
  setup:
    runs-on: ubuntu-latest  # Specifies the OS that the job will run on, in this case, the latest Ubuntu version.

    # Steps in this job will be executed sequentially
    steps:
      # Step 1: Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v4  # This action checks out the repository's code so it can be accessed by the following steps.

      # Step 2: Set up the Python environment for the job
      - name: Set up Python
        id: python  # Assigns an ID to the step for referencing.
        uses: actions/setup-python@v5  # This action sets up Python in the runner.
        with:
          python-version: '3.11'  # Specifies the version of Python to be used (Python 3.11 in this case).

      # Step 3: Install dependencies listed in the 'requirements.txt' file
      - name: Install dependencies
        run: pip install -r requirements.txt  # This command installs the dependencies required for your project.

  # Job for Build
  build:
    runs-on: ubuntu-latest  # This job will also run on the latest Ubuntu version.
    needs: setup  # This ensures that the 'build' job will only run after the 'setup' job completes.

    steps:
      # Step 1: Build the application (after the setup job completes)
      - name: Build the application # here we create the diffetnet builds andriod, ios apletv, etc)
        run: |
          echo "Building the app..."  # Simulate building the app.
          mkdir build-output  # Create an output directory where the build artifact will be saved.
          echo "Build artifact content" > build-output/artifact.txt  # Save the build artifact (simulated content) in the directory.

  # Job for Unit Tests (Runs in parallel with the Build job)
  unit-tests:
    runs-on: ubuntu-latest  # Runs on the latest Ubuntu version.
    needs: setup  # This ensures the unit-test job runs after the 'setup' job completes.

    steps:
      # Step 1: Run Unit Tests
      - name: Run Unit Tests
        run: pytest tests/unit  # This command runs unit tests located in the 'tests/unit' directory.

  # Job for Functional Tests (Runs after the Build job completes)
  functional-tests:
    runs-on: ubuntu-latest  # Runs on the latest Ubuntu version.
    needs: [setup, build]  # This ensures functional tests will run after both 'setup' and 'build' jobs are completed.

    steps:
      # Step 1: Run Functional Tests
      - name: Run Functional Tests
        run: pytest tests/functional  # Runs functional tests located in the 'tests/functional' directory.

  # Job for Integration Tests (Runs after the Build job completes)
  integration-tests:
    runs-on: ubuntu-latest  # Runs on the latest Ubuntu version.
    needs: [setup, build]  # Ensures that integration tests only run after the setup and build jobs are complete.

    steps:
      # Step 1: Run Integration Tests
      - name: Run Integration Tests
        run: pytest tests/integration  # Runs integration tests located in the 'tests/integration' directory.

  # Job for Regression Tests (Runs after the Build job completes)
  regression-tests:
    runs-on: ubuntu-latest  # Runs on the latest Ubuntu version.
    needs: [setup, build]  # Ensures that regression tests only run after the setup and build jobs are completed.

    steps:
      # Step 1: Run Regression Tests
      - name: Run Regression Tests
        run: pytest tests/regression  # Runs regression tests located in the 'tests/regression' directory.

  # Job for Deployment to Staging (Runs after all test jobs)
  deploy-to-staging:
    needs: [build, unit-tests, functional-tests, integration-tests, regression-tests]  # Ensures deployment happens after all tests.
    runs-on: ubuntu-latest  # Runs on the latest Ubuntu version.

    steps:
      # Step 1: Simulate deployment to staging environment
      - name: Simulate deployment to staging
        run: |
          echo "Deploying to staging environment..."  # This is a placeholder to simulate the deployment process. 
          # In a real pipeline, you would replace this with your actual deployment commands.
